import React, { useEffect, useState, useCallback } from 'react';
import { useChatStore } from '../store/useChatStore';
import { Users } from 'lucide-react';
import { useAuthStore } from '../store/useAuthStore';
import SidebarSkeleton from './skeletons/SidebarSkeleton';
import CreateGroupModal from './CreateGroupModal';

function Sidebar() {
  const { getUsers, users, selectedUser, setSelectedUser, isUsersLoading, getMyGroups, groups } = useChatStore();
  const { onlineUsers } = useAuthStore();
  
  const [showOnlineOnly, setShowOnlineOnly] = useState(false);
  const [showCreateGroup, setShowCreateGroup] = useState(false);
  const [newGroupName, setNewGroupName] = useState('');
  const [selectedMembers, setSelectedMembers] = useState([]);
  const [allUsers, setAllUsers] = useState([]);

  const handleCreateGroup = useCallback(async (name, members) => {
    try {
      const store = useChatStore.getState();
      await store.createGroup({ name, members });
      await store.getMyGroups();
    } catch (error) {
      throw error;
    }
  }, []);
  
  useEffect(() => {
    if (showCreateGroup) {
      const currentUser = useAuthStore.getState().authUser;
      const filteredUsers = users.filter(u => u._id !== currentUser._id);
      setAllUsers(filteredUsers);
    } else {
      setSelectedMembers([]);
      setNewGroupName('');
    }
  }, [showCreateGroup, users]);

  useEffect(() => {
    getMyGroups();
  }, [getMyGroups]);

  useEffect(() => {
    getUsers();
  }, [getUsers]);

  const filteredUsers = showOnlineOnly ? users.filter(user => onlineUsers.includes(user._id)) : users;

  if (isUsersLoading) return <SidebarSkeleton />;

  return (
    <>
      <aside className="h-full w-20 lg:w-72 border-r border-base-300 flex flex-col transition-all duration-200">
        <div className="border-b border-base-300 w-full p-5">
          <div className="flex items-center gap-2">
            <Users className="size-6" />
            <span className="font-medium hidden lg:block">Contacts</span>
          </div>
          <div className="mt-3 hidden lg:flex items-center gap-2">
            <label className="cursor-pointer flex items-center gap-2">
              <input
                type="checkbox"
                checked={showOnlineOnly}
                onChange={(e) => setShowOnlineOnly(e.target.checked)}
                className="checkbox checkbox-sm"
              />
              <span className="text-sm">Show online only</span>
            </label>
            <span className="text-xs text-zinc-500">({onlineUsers.length - 1} online)</span>
          </div>
        </div>

        <div className="overflow-y-auto w-full py-3">
          {filteredUsers.map((user) => (
            <button
              key={user._id}
              onClick={() => setSelectedUser(user)}
              className={`
                w-full p-3 flex items-center gap-3
                hover:bg-base-300 transition-colors
                ${selectedUser?._id === user._id ? "bg-base-300 ring-1 ring-base-300" : ""}
              `}
            >
              <div className="relative mx-auto lg:mx-0">
                <img
                  src={user?.profilePic || "https://static.vecteezy.com/system/resources/previews/002/318/271/original/user-profile-icon-free-vector.jpg"}
                  alt={user.name}
                  className="size-12 object-cover rounded-full"
                />
                {onlineUsers.includes(user._id) && (
                  <span
                    className="absolute bottom-0 right-0 size-3 bg-green-500 
                    rounded-full ring-2 ring-zinc-900"
                  />
                )}
              </div>

              <div className="hidden lg:block text-left min-w-0">
                <div className="font-medium truncate">{user.fullName}</div>
                <div className="text-sm text-zinc-400">
                  {onlineUsers.includes(user._id) ? "Online" : "Offline"}
                </div>
              </div>
            </button>
          ))}
        </div>

        <div className='mt-6 px-4 hidden lg:block'>
          <div className='flex items-center justify-between mb-2'>
            <h4 className='text-sm font-semibold'>Groups</h4>
            <button className='text-xs text-blue-500 hover:text-blue-600 font-medium' 
              onClick={() => setShowCreateGroup(true)}>
              + Create Group
            </button>
          </div>
          <div className='flex flex-col gap-2'>
            {groups?.map(g => (
              <div 
                key={g._id} 
                className={`flex items-center gap-2 p-2 cursor-pointer rounded-md hover:bg-base-300 transition-colors
                  ${selectedUser?._id === g._id ? 'bg-base-300' : ''}`}
                onClick={() => { 
                  setSelectedUser({ __isGroup: true, ...g }); 
                  getMyGroups(); 
                }}
              >
                <div className="flex-shrink-0 w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <span className="text-blue-600 text-sm font-medium">#</span>
                </div>
                <div className="flex-grow">
                  <div className="text-sm font-medium">{g.name}</div>
                  <div className="text-xs text-gray-500">{g.members?.length || 0} members</div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </aside>

      <CreateGroupModal 
        isOpen={showCreateGroup}
        onClose={() => setShowCreateGroup(false)}
        allUsers={allUsers}
        selectedMembers={selectedMembers}
        setSelectedMembers={setSelectedMembers}
        newGroupName={newGroupName}
        setNewGroupName={setNewGroupName}
        handleCreateGroup={handleCreateGroup}
      />
    </>
  );
}

export default Sidebar;
